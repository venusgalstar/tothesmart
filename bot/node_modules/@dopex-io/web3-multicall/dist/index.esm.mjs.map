{"version":3,"file":"index.esm.mjs","sources":["../src/constants.ts","../src/Multicall.ts"],"sourcesContent":["export const CHAIN_ID_TO_MULTICALL_ADDRESS: { [key: number]: string } = {\n  1: '0xeefba1e63905ef1d7acba5a8513c70307c1ce441',\n  3: '0xF24b01476a55d635118ca848fbc7Dab69d403be3',\n  4: '0x42ad527de7d4e9d9d011ac45b31d8551f8fe9821',\n  5: '0x77dca2c955b15e9de4dbbcf1246b4b85b651e50e',\n  42: '0x2cc8688c5f75e365aaeeb4ea8d6a480405a48d2a',\n  56: '0x1Ee38d535d541c55C9dae27B12edf090C608E6Fb',\n  100: '0xb5b692a88bdfc81ca69dcb1d924f59f0413a602a',\n  137: '0xc4f1501f337079077842343Ce02665D8960150B0',\n  80001: '0x5a0439824F4c0275faa88F2a7C5037F9833E29f1',\n  42161: '0x813715eF627B01f4931d8C6F8D2459F26E19137E',\n  421611: '0xc72e0331e2e7aeb30aa7d3d250d245ebf2f27037',\n};\n","import Web3 from 'web3';\nimport { AbiItem } from 'web3-utils';\nimport { Contract } from 'web3-eth-contract';\nimport { provider } from 'web3-core';\n\nimport { CHAIN_ID_TO_MULTICALL_ADDRESS } from './constants';\nimport mulitcallAbi from './abi/Multicall.json';\n\ninterface ConstructorArgs {\n  chainId?: number;\n  provider: provider;\n  defaultBlock?: number | '';\n  multicallAddress?: string;\n}\n\nexport default class Multicall {\n  web3: Web3;\n  multicall: Contract;\n\n  constructor({\n    chainId,\n    provider,\n    multicallAddress,\n    defaultBlock,\n  }: ConstructorArgs) {\n    this.web3 = new Web3(provider);\n\n    const _multicallAddress = multicallAddress\n      ? multicallAddress\n      : chainId\n      ? CHAIN_ID_TO_MULTICALL_ADDRESS[chainId]\n      : undefined;\n\n    if (!_multicallAddress) {\n      throw new Error(\n        'No address found via chainId. Please specify multicallAddress.'\n      );\n    }\n\n    this.multicall = new this.web3.eth.Contract(\n      mulitcallAbi as AbiItem[],\n      _multicallAddress\n    );\n\n    if (defaultBlock) this.multicall.defaultBlock = defaultBlock;\n  }\n\n  async aggregate(calls: any[], parameters = {}) {\n    const callRequests = calls.map((call) => {\n      const callData = call.encodeABI();\n      return {\n        target: call._parent._address,\n        callData,\n      };\n    });\n\n    const { returnData } = await this.multicall.methods\n      .aggregate(callRequests)\n      .call(parameters);\n\n    return returnData.map((hex: string, index: number) => {\n      const types = calls[index]._method.outputs.map((o: any) =>\n        o.internalType !== o.type && o.internalType !== undefined ? o : o.type\n      );\n\n      let result = this.web3.eth.abi.decodeParameters(types, hex);\n\n      delete result.__length__;\n\n      result = Object.values(result);\n\n      return result.length === 1 ? result[0] : result;\n    });\n  }\n\n  getEthBalance(address: string) {\n    return this.multicall.methods.getEthBalance(address);\n  }\n\n  getBlockHash(blockNumber: string | number) {\n    return this.multicall.methods.getBlockHash(blockNumber);\n  }\n\n  getLastBlockHash() {\n    return this.multicall.methods.getLastBlockHash();\n  }\n\n  getCurrentBlockTimestamp() {\n    return this.multicall.methods.getCurrentBlockTimestamp();\n  }\n\n  getCurrentBlockDifficulty() {\n    return this.multicall.methods.getCurrentBlockDifficulty();\n  }\n\n  getCurrentBlockGasLimit() {\n    return this.multicall.methods.getCurrentBlockGasLimit();\n  }\n\n  getCurrentBlockCoinbase() {\n    return this.multicall.methods.getCurrentBlockCoinbase();\n  }\n}\n"],"names":["CHAIN_ID_TO_MULTICALL_ADDRESS","Multicall","_ref","chainId","provider","multicallAddress","defaultBlock","web3","multicall","this","Web3","_multicallAddress","undefined","Error","eth","Contract","mulitcallAbi","aggregate","calls","parameters","_this2","callRequests","map","call","callData","encodeABI","target","_parent","_address","Promise","resolve","methods","_ref2","returnData","hex","index","types","_method","outputs","o","internalType","type","abi","decodeParameters","result","__length__","Object","values","length","getEthBalance","address","getBlockHash","blockNumber","getLastBlockHash","getCurrentBlockTimestamp","getCurrentBlockDifficulty","getCurrentBlockGasLimit","getCurrentBlockCoinbase"],"mappings":"wBAA0CA,EAA8B,CACtE,EAAG,6CACH,EAAG,6CACH,EAAG,6CACH,EAAG,6CACH,GAAI,6CACJ,GAAI,6CACJ,IAAK,6CACL,IAAK,6CACL,MAAO,6CACP,MAAO,6CACP,OAAQ,i5CCQR,WAAA,SAAAC,EAAAC,OAKkBC,EAAAD,EAJhBC,QACAC,IAAAA,SACAC,EAAAA,EAAAA,iBACAC,EACgBJ,EADhBI,aAPFC,KAAAA,iBACAC,eAOkB,EAChBC,KAAKF,KAAO,IAAAG,EAASN,GAErB,IAAuBO,EAAGN,IAEtBF,EACAH,EAA8BG,QAC9BS,GAEJ,IAAKD,EACH,MAAUE,IAAAA,MACR,kEAIJJ,KAAKD,UAAY,IAAIC,KAAKF,KAAKO,IAAIC,SACjCC,EACAL,GAGEL,IAAcG,KAAKD,UAAUF,aAAeA,8BAG5CW,mBAAUC,EAAcC,YAAAA,IAAAA,EAAa,QASZ,IAAAC,EAAAX,KARvBY,EAAeH,EAAMI,IAAI,SAACC,GAC9B,IAAcC,EAAGD,EAAKE,YACtB,MAAO,CACLC,OAAQH,EAAKI,QAAQC,SACrBJ,SAAAA,KALuC,OASdK,QAAAC,QAAAV,EAAKZ,UAAUuB,QACzCd,UAAUI,GACVE,KAAKJ,qBAER,OAb2Ca,EASnCC,WAIUX,IAAI,SAACY,EAAaC,GAClC,IAAMC,EAAQlB,EAAMiB,GAAOE,QAAQC,QAAQhB,IAAI,SAACiB,UAC7CA,EAACC,eAAiBD,EAAEE,WAA2B7B,IAAnB2B,EAAEC,aAA6BD,EAAIA,EAAEE,SAGvDrB,EAAKb,KAAKO,IAAI4B,IAAIC,iBAAiBP,EAAOF,GAMvD,cAJOU,EAAOC,WAIW,KAFzBD,EAASE,OAAOC,OAAOH,IAETI,OAAeJ,EAAO,GAAKA,4CAI7CK,cAAA,SAAcC,GACZ,OAAY1C,KAAAA,UAAUuB,QAAQkB,cAAcC,MAG9CC,aAAA,SAAaC,GACX,OAAY5C,KAAAA,UAAUuB,QAAQoB,aAAaC,MAG7CC,iBAAA,WACE,OAAO5C,KAAKD,UAAUuB,QAAQsB,oBAGhCC,EAAAA,yBAAA,WACE,OAAY9C,KAAAA,UAAUuB,QAAQuB,8BAGhCC,0BAAA,WACE,YAAY/C,UAAUuB,QAAQwB,+BAGhCC,wBAAA,WACE,OAAO/C,KAAKD,UAAUuB,QAAQyB,2BAGhCC,EAAAA,wBAAA,WACE,OAAYjD,KAAAA,UAAUuB,QAAQ0B,6BAjFhC"}