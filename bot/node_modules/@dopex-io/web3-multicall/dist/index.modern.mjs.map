{"version":3,"file":"index.modern.mjs","sources":["../src/constants.ts","../src/Multicall.ts"],"sourcesContent":["export const CHAIN_ID_TO_MULTICALL_ADDRESS: { [key: number]: string } = {\n  1: '0xeefba1e63905ef1d7acba5a8513c70307c1ce441',\n  3: '0xF24b01476a55d635118ca848fbc7Dab69d403be3',\n  4: '0x42ad527de7d4e9d9d011ac45b31d8551f8fe9821',\n  5: '0x77dca2c955b15e9de4dbbcf1246b4b85b651e50e',\n  42: '0x2cc8688c5f75e365aaeeb4ea8d6a480405a48d2a',\n  56: '0x1Ee38d535d541c55C9dae27B12edf090C608E6Fb',\n  100: '0xb5b692a88bdfc81ca69dcb1d924f59f0413a602a',\n  137: '0xc4f1501f337079077842343Ce02665D8960150B0',\n  80001: '0x5a0439824F4c0275faa88F2a7C5037F9833E29f1',\n  42161: '0x813715eF627B01f4931d8C6F8D2459F26E19137E',\n  421611: '0xc72e0331e2e7aeb30aa7d3d250d245ebf2f27037',\n};\n","import Web3 from 'web3';\nimport { AbiItem } from 'web3-utils';\nimport { Contract } from 'web3-eth-contract';\nimport { provider } from 'web3-core';\n\nimport { CHAIN_ID_TO_MULTICALL_ADDRESS } from './constants';\nimport mulitcallAbi from './abi/Multicall.json';\n\ninterface ConstructorArgs {\n  chainId?: number;\n  provider: provider;\n  defaultBlock?: number | '';\n  multicallAddress?: string;\n}\n\nexport default class Multicall {\n  web3: Web3;\n  multicall: Contract;\n\n  constructor({\n    chainId,\n    provider,\n    multicallAddress,\n    defaultBlock,\n  }: ConstructorArgs) {\n    this.web3 = new Web3(provider);\n\n    const _multicallAddress = multicallAddress\n      ? multicallAddress\n      : chainId\n      ? CHAIN_ID_TO_MULTICALL_ADDRESS[chainId]\n      : undefined;\n\n    if (!_multicallAddress) {\n      throw new Error(\n        'No address found via chainId. Please specify multicallAddress.'\n      );\n    }\n\n    this.multicall = new this.web3.eth.Contract(\n      mulitcallAbi as AbiItem[],\n      _multicallAddress\n    );\n\n    if (defaultBlock) this.multicall.defaultBlock = defaultBlock;\n  }\n\n  async aggregate(calls: any[], parameters = {}) {\n    const callRequests = calls.map((call) => {\n      const callData = call.encodeABI();\n      return {\n        target: call._parent._address,\n        callData,\n      };\n    });\n\n    const { returnData } = await this.multicall.methods\n      .aggregate(callRequests)\n      .call(parameters);\n\n    return returnData.map((hex: string, index: number) => {\n      const types = calls[index]._method.outputs.map((o: any) =>\n        o.internalType !== o.type && o.internalType !== undefined ? o : o.type\n      );\n\n      let result = this.web3.eth.abi.decodeParameters(types, hex);\n\n      delete result.__length__;\n\n      result = Object.values(result);\n\n      return result.length === 1 ? result[0] : result;\n    });\n  }\n\n  getEthBalance(address: string) {\n    return this.multicall.methods.getEthBalance(address);\n  }\n\n  getBlockHash(blockNumber: string | number) {\n    return this.multicall.methods.getBlockHash(blockNumber);\n  }\n\n  getLastBlockHash() {\n    return this.multicall.methods.getLastBlockHash();\n  }\n\n  getCurrentBlockTimestamp() {\n    return this.multicall.methods.getCurrentBlockTimestamp();\n  }\n\n  getCurrentBlockDifficulty() {\n    return this.multicall.methods.getCurrentBlockDifficulty();\n  }\n\n  getCurrentBlockGasLimit() {\n    return this.multicall.methods.getCurrentBlockGasLimit();\n  }\n\n  getCurrentBlockCoinbase() {\n    return this.multicall.methods.getCurrentBlockCoinbase();\n  }\n}\n"],"names":["CHAIN_ID_TO_MULTICALL_ADDRESS","constructor","chainId","provider","multicallAddress","defaultBlock","web3","multicall","this","Web3","_multicallAddress","undefined","Error","eth","Contract","mulitcallAbi","async","calls","parameters","map","call","callData","encodeABI","target","_parent","_address","returnData","methods","aggregate","callRequests","hex","index","types","_method","outputs","o","internalType","type","result","abi","decodeParameters","__length__","Object","values","length","getEthBalance","address","getBlockHash","blockNumber","getLastBlockHash","getCurrentBlockTimestamp","getCurrentBlockDifficulty","getCurrentBlockGasLimit","getCurrentBlockCoinbase"],"mappings":"0BAA0CA,EAA8B,CACtE,EAAG,6CACH,EAAG,6CACH,EAAG,6CACH,EAAG,6CACH,GAAI,6CACJ,GAAI,6CACJ,IAAK,6CACL,IAAK,6CACL,MAAO,6CACP,MAAO,6CACP,OAAQ,s4CCII,QAIZC,aAAYC,QACVA,EADUC,SAEVA,EAFUC,iBAGVA,EAHUC,aAIVA,IAPFC,KAAAA,iBACAC,eAOkB,EAChBC,KAAKF,KAAO,IAAAG,EAASN,GAErB,MAAMO,EAAoBN,IAEtBF,EACAF,EAA8BE,QAC9BS,GAEJ,IAAKD,EACH,MAAUE,IAAAA,MACR,kEAIJJ,KAAKD,UAAY,SAASD,KAAKO,IAAIC,SACjCC,EACAL,GAGEL,IAAcG,KAAKD,UAAUF,aAAeA,GAGnCW,gBAACC,EAAcC,EAAa,IACzC,QAAqBD,EAAME,IAAKC,IAC9B,MAAMC,EAAWD,EAAKE,YACtB,MAAO,CACLC,OAAQH,EAAKI,QAAQC,SACrBJ,eAIEK,WAAEA,SAA0BnB,KAAAA,UAAUoB,QACzCC,UAAUC,GACVT,KAAKF,GAER,OAAOQ,EAAWP,IAAI,CAACW,EAAaC,KAClC,MAAMC,EAAQf,EAAMc,GAAOE,QAAQC,QAAQf,IAAKgB,GAC9CA,EAAEC,eAAiBD,EAAEE,WAA2B1B,IAAnBwB,EAAEC,aAA6BD,EAAIA,EAAEE,MAGpE,IAAIC,EAAS9B,KAAKF,KAAKO,IAAI0B,IAAIC,iBAAiBR,EAAOF,GAMvD,cAJOQ,EAAOG,WAEdH,EAASI,OAAOC,OAAOL,GAEE,MAAXM,OAAeN,EAAO,GAAKA,IAI7CO,cAAcC,GACZ,OAAOtC,KAAKD,UAAUoB,QAAQkB,cAAcC,GAG9CC,aAAaC,GACX,OAAYzC,KAAAA,UAAUoB,QAAQoB,aAAaC,GAG7CC,mBACE,OAAY1C,KAAAA,UAAUoB,QAAQsB,mBAGhCC,2BACE,OAAO1C,KAAKD,UAAUoB,QAAQuB,2BAGhCC,4BACE,OAAY5C,KAAAA,UAAUoB,QAAQwB,4BAGhCC,0BACE,OAAO5C,KAAKD,UAAUoB,QAAQyB,0BAGhCC,0BACE,YAAY9C,UAAUoB,QAAQ0B"}