import t from"web3";const e={1:"0xeefba1e63905ef1d7acba5a8513c70307c1ce441",3:"0xF24b01476a55d635118ca848fbc7Dab69d403be3",4:"0x42ad527de7d4e9d9d011ac45b31d8551f8fe9821",5:"0x77dca2c955b15e9de4dbbcf1246b4b85b651e50e",42:"0x2cc8688c5f75e365aaeeb4ea8d6a480405a48d2a",56:"0x1Ee38d535d541c55C9dae27B12edf090C608E6Fb",100:"0xb5b692a88bdfc81ca69dcb1d924f59f0413a602a",137:"0xc4f1501f337079077842343Ce02665D8960150B0",80001:"0x5a0439824F4c0275faa88F2a7C5037F9833E29f1",42161:"0x813715eF627B01f4931d8C6F8D2459F26E19137E",421611:"0xc72e0331e2e7aeb30aa7d3d250d245ebf2f27037"};var a=[{constant:!0,inputs:[],name:"getCurrentBlockTimestamp",outputs:[{name:"timestamp",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{components:[{name:"target",type:"address"},{name:"callData",type:"bytes"}],name:"calls",type:"tuple[]"}],name:"aggregate",outputs:[{name:"blockNumber",type:"uint256"},{name:"returnData",type:"bytes[]"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"getLastBlockHash",outputs:[{name:"blockHash",type:"bytes32"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"addr",type:"address"}],name:"getEthBalance",outputs:[{name:"balance",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"getCurrentBlockDifficulty",outputs:[{name:"difficulty",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"getCurrentBlockGasLimit",outputs:[{name:"gaslimit",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"getCurrentBlockCoinbase",outputs:[{name:"coinbase",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"blockNumber",type:"uint256"}],name:"getBlockHash",outputs:[{name:"blockHash",type:"bytes32"}],payable:!1,stateMutability:"view",type:"function"}];class n{constructor({chainId:n,provider:s,multicallAddress:i,defaultBlock:l}){this.web3=void 0,this.multicall=void 0,this.web3=new t(s);const c=i||(n?e[n]:void 0);if(!c)throw new Error("No address found via chainId. Please specify multicallAddress.");this.multicall=new this.web3.eth.Contract(a,c),l&&(this.multicall.defaultBlock=l)}async aggregate(t,e={}){const a=t.map(t=>{const e=t.encodeABI();return{target:t._parent._address,callData:e}}),{returnData:n}=await this.multicall.methods.aggregate(a).call(e);return n.map((e,a)=>{const n=t[a]._method.outputs.map(t=>t.internalType!==t.type&&void 0!==t.internalType?t:t.type);let s=this.web3.eth.abi.decodeParameters(n,e);return delete s.__length__,s=Object.values(s),1===s.length?s[0]:s})}getEthBalance(t){return this.multicall.methods.getEthBalance(t)}getBlockHash(t){return this.multicall.methods.getBlockHash(t)}getLastBlockHash(){return this.multicall.methods.getLastBlockHash()}getCurrentBlockTimestamp(){return this.multicall.methods.getCurrentBlockTimestamp()}getCurrentBlockDifficulty(){return this.multicall.methods.getCurrentBlockDifficulty()}getCurrentBlockGasLimit(){return this.multicall.methods.getCurrentBlockGasLimit()}getCurrentBlockCoinbase(){return this.multicall.methods.getCurrentBlockCoinbase()}}export{n as default};
//# sourceMappingURL=index.modern.mjs.map
