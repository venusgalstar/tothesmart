import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export interface EscrowInterface extends utils.Interface {
    functions: {
        "addBaseTokens(address[])": FunctionFragment;
        "addQuoteToken(address)": FunctionFragment;
        "balances(bytes32)": FunctionFragment;
        "baseAddresses(address)": FunctionFragment;
        "calculateSettlementFees(address,uint256)": FunctionFragment;
        "cancel(address,address,address)": FunctionFragment;
        "feeDistributor()": FunctionFragment;
        "fulfill(address,address,address)": FunctionFragment;
        "open(address,address,address,uint256,uint256)": FunctionFragment;
        "owner()": FunctionFragment;
        "pendingBalances(bytes32)": FunctionFragment;
        "quoteAddresses(address)": FunctionFragment;
        "removeTokens(address[])": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "tradeFeePercentage()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "updateFeeDistributor(address)": FunctionFragment;
        "updateTradeFeePercentage(uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "addBaseTokens" | "addQuoteToken" | "balances" | "baseAddresses" | "calculateSettlementFees" | "cancel" | "feeDistributor" | "fulfill" | "open" | "owner" | "pendingBalances" | "quoteAddresses" | "removeTokens" | "renounceOwnership" | "tradeFeePercentage" | "transferOwnership" | "updateFeeDistributor" | "updateTradeFeePercentage"): FunctionFragment;
    encodeFunctionData(functionFragment: "addBaseTokens", values: [PromiseOrValue<string>[]]): string;
    encodeFunctionData(functionFragment: "addQuoteToken", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "balances", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "baseAddresses", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "calculateSettlementFees", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "cancel", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "feeDistributor", values?: undefined): string;
    encodeFunctionData(functionFragment: "fulfill", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "open", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "pendingBalances", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "quoteAddresses", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "removeTokens", values: [PromiseOrValue<string>[]]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "tradeFeePercentage", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "updateFeeDistributor", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "updateTradeFeePercentage", values: [PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "addBaseTokens", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addQuoteToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "baseAddresses", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "calculateSettlementFees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "feeDistributor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fulfill", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pendingBalances", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteAddresses", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeTokens", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tradeFeePercentage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateFeeDistributor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateTradeFeePercentage", data: BytesLike): Result;
    events: {
        "AddToken(address,bool)": EventFragment;
        "Cancel(address,address,address,address,uint256)": EventFragment;
        "Fulfill(address,address,address,address,uint256,uint256)": EventFragment;
        "Open(address,address,address,address,uint256,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "RemoveToken(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AddToken"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Cancel"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Fulfill"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Open"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RemoveToken"): EventFragment;
}
export interface AddTokenEventObject {
    asset: string;
    isQuote: boolean;
}
export declare type AddTokenEvent = TypedEvent<[string, boolean], AddTokenEventObject>;
export declare type AddTokenEventFilter = TypedEventFilter<AddTokenEvent>;
export interface CancelEventObject {
    dealer: string;
    counterParty: string;
    quote: string;
    base: string;
    withdrawAmount: BigNumber;
}
export declare type CancelEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    BigNumber
], CancelEventObject>;
export declare type CancelEventFilter = TypedEventFilter<CancelEvent>;
export interface FulfillEventObject {
    counterParty: string;
    dealer: string;
    quote: string;
    base: string;
    dealerSendAmount: BigNumber;
    dealerReceiveAmount: BigNumber;
}
export declare type FulfillEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber
], FulfillEventObject>;
export declare type FulfillEventFilter = TypedEventFilter<FulfillEvent>;
export interface OpenEventObject {
    dealer: string;
    counterParty: string;
    quote: string;
    base: string;
    sendAmount: BigNumber;
    receiveAmount: BigNumber;
}
export declare type OpenEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber
], OpenEventObject>;
export declare type OpenEventFilter = TypedEventFilter<OpenEvent>;
export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export declare type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
export declare type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface RemoveTokenEventObject {
    asset: string;
}
export declare type RemoveTokenEvent = TypedEvent<[string], RemoveTokenEventObject>;
export declare type RemoveTokenEventFilter = TypedEventFilter<RemoveTokenEvent>;
export interface Escrow extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: EscrowInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        addBaseTokens(tokens: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        addQuoteToken(token: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        balances(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        baseAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        calculateSettlementFees(asset: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        cancel(quote: PromiseOrValue<string>, base: PromiseOrValue<string>, counterParty: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        feeDistributor(overrides?: CallOverrides): Promise<[string]>;
        fulfill(quote: PromiseOrValue<string>, base: PromiseOrValue<string>, dealer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        open(quote: PromiseOrValue<string>, base: PromiseOrValue<string>, counterParty: PromiseOrValue<string>, sendAmount: PromiseOrValue<BigNumberish>, receiveAmount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        pendingBalances(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        quoteAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        removeTokens(tokens: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        tradeFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateFeeDistributor(_feeDistributor: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateTradeFeePercentage(newFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    addBaseTokens(tokens: PromiseOrValue<string>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    addQuoteToken(token: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    balances(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    baseAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    calculateSettlementFees(asset: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    cancel(quote: PromiseOrValue<string>, base: PromiseOrValue<string>, counterParty: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    feeDistributor(overrides?: CallOverrides): Promise<string>;
    fulfill(quote: PromiseOrValue<string>, base: PromiseOrValue<string>, dealer: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    open(quote: PromiseOrValue<string>, base: PromiseOrValue<string>, counterParty: PromiseOrValue<string>, sendAmount: PromiseOrValue<BigNumberish>, receiveAmount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    owner(overrides?: CallOverrides): Promise<string>;
    pendingBalances(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    quoteAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    removeTokens(tokens: PromiseOrValue<string>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    tradeFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateFeeDistributor(_feeDistributor: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateTradeFeePercentage(newFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        addBaseTokens(tokens: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<boolean>;
        addQuoteToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        balances(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        baseAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        calculateSettlementFees(asset: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        cancel(quote: PromiseOrValue<string>, base: PromiseOrValue<string>, counterParty: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        feeDistributor(overrides?: CallOverrides): Promise<string>;
        fulfill(quote: PromiseOrValue<string>, base: PromiseOrValue<string>, dealer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        open(quote: PromiseOrValue<string>, base: PromiseOrValue<string>, counterParty: PromiseOrValue<string>, sendAmount: PromiseOrValue<BigNumberish>, receiveAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        owner(overrides?: CallOverrides): Promise<string>;
        pendingBalances(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        quoteAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        removeTokens(tokens: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<boolean>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        tradeFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        updateFeeDistributor(_feeDistributor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        updateTradeFeePercentage(newFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AddToken(address,bool)"(asset?: PromiseOrValue<string> | null, isQuote?: null): AddTokenEventFilter;
        AddToken(asset?: PromiseOrValue<string> | null, isQuote?: null): AddTokenEventFilter;
        "Cancel(address,address,address,address,uint256)"(dealer?: PromiseOrValue<string> | null, counterParty?: PromiseOrValue<string> | null, quote?: null, base?: null, withdrawAmount?: null): CancelEventFilter;
        Cancel(dealer?: PromiseOrValue<string> | null, counterParty?: PromiseOrValue<string> | null, quote?: null, base?: null, withdrawAmount?: null): CancelEventFilter;
        "Fulfill(address,address,address,address,uint256,uint256)"(counterParty?: PromiseOrValue<string> | null, dealer?: PromiseOrValue<string> | null, quote?: null, base?: null, dealerSendAmount?: null, dealerReceiveAmount?: null): FulfillEventFilter;
        Fulfill(counterParty?: PromiseOrValue<string> | null, dealer?: PromiseOrValue<string> | null, quote?: null, base?: null, dealerSendAmount?: null, dealerReceiveAmount?: null): FulfillEventFilter;
        "Open(address,address,address,address,uint256,uint256)"(dealer?: PromiseOrValue<string> | null, counterParty?: PromiseOrValue<string> | null, quote?: null, base?: null, sendAmount?: null, receiveAmount?: null): OpenEventFilter;
        Open(dealer?: PromiseOrValue<string> | null, counterParty?: PromiseOrValue<string> | null, quote?: null, base?: null, sendAmount?: null, receiveAmount?: null): OpenEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        "RemoveToken(address)"(asset?: null): RemoveTokenEventFilter;
        RemoveToken(asset?: null): RemoveTokenEventFilter;
    };
    estimateGas: {
        addBaseTokens(tokens: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        addQuoteToken(token: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        balances(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        baseAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        calculateSettlementFees(asset: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        cancel(quote: PromiseOrValue<string>, base: PromiseOrValue<string>, counterParty: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        feeDistributor(overrides?: CallOverrides): Promise<BigNumber>;
        fulfill(quote: PromiseOrValue<string>, base: PromiseOrValue<string>, dealer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        open(quote: PromiseOrValue<string>, base: PromiseOrValue<string>, counterParty: PromiseOrValue<string>, sendAmount: PromiseOrValue<BigNumberish>, receiveAmount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        pendingBalances(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        quoteAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        removeTokens(tokens: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        tradeFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateFeeDistributor(_feeDistributor: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateTradeFeePercentage(newFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        addBaseTokens(tokens: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        addQuoteToken(token: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        balances(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        baseAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        calculateSettlementFees(asset: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        cancel(quote: PromiseOrValue<string>, base: PromiseOrValue<string>, counterParty: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        feeDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        fulfill(quote: PromiseOrValue<string>, base: PromiseOrValue<string>, dealer: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        open(quote: PromiseOrValue<string>, base: PromiseOrValue<string>, counterParty: PromiseOrValue<string>, sendAmount: PromiseOrValue<BigNumberish>, receiveAmount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pendingBalances(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        removeTokens(tokens: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        tradeFeePercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateFeeDistributor(_feeDistributor: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateTradeFeePercentage(newFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
