import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export interface BnbSSOVRouterInterface extends utils.Interface {
    functions: {
        "deposit(uint256,address)": FunctionFragment;
        "depositMultiple(uint256[],uint256[],address)": FunctionFragment;
        "purchase(uint256,uint256,address)": FunctionFragment;
        "ssov()": FunctionFragment;
        "vbnb()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "deposit" | "depositMultiple" | "purchase" | "ssov" | "vbnb"): FunctionFragment;
    encodeFunctionData(functionFragment: "deposit", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "depositMultiple", values: [
        PromiseOrValue<BigNumberish>[],
        PromiseOrValue<BigNumberish>[],
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "purchase", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "ssov", values?: undefined): string;
    encodeFunctionData(functionFragment: "vbnb", values?: undefined): string;
    decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositMultiple", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ssov", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "vbnb", data: BytesLike): Result;
    events: {};
}
export interface BnbSSOVRouter extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: BnbSSOVRouterInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        deposit(_strikeIndex: PromiseOrValue<BigNumberish>, _to: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        depositMultiple(_strikeIndices: PromiseOrValue<BigNumberish>[], _amounts: PromiseOrValue<BigNumberish>[], _to: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        purchase(_strikeIndex: PromiseOrValue<BigNumberish>, _amount: PromiseOrValue<BigNumberish>, _to: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        ssov(overrides?: CallOverrides): Promise<[string]>;
        vbnb(overrides?: CallOverrides): Promise<[string]>;
    };
    deposit(_strikeIndex: PromiseOrValue<BigNumberish>, _to: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    depositMultiple(_strikeIndices: PromiseOrValue<BigNumberish>[], _amounts: PromiseOrValue<BigNumberish>[], _to: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    purchase(_strikeIndex: PromiseOrValue<BigNumberish>, _amount: PromiseOrValue<BigNumberish>, _to: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    ssov(overrides?: CallOverrides): Promise<string>;
    vbnb(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        deposit(_strikeIndex: PromiseOrValue<BigNumberish>, _to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        depositMultiple(_strikeIndices: PromiseOrValue<BigNumberish>[], _amounts: PromiseOrValue<BigNumberish>[], _to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        purchase(_strikeIndex: PromiseOrValue<BigNumberish>, _amount: PromiseOrValue<BigNumberish>, _to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;
        ssov(overrides?: CallOverrides): Promise<string>;
        vbnb(overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        deposit(_strikeIndex: PromiseOrValue<BigNumberish>, _to: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        depositMultiple(_strikeIndices: PromiseOrValue<BigNumberish>[], _amounts: PromiseOrValue<BigNumberish>[], _to: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        purchase(_strikeIndex: PromiseOrValue<BigNumberish>, _amount: PromiseOrValue<BigNumberish>, _to: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        ssov(overrides?: CallOverrides): Promise<BigNumber>;
        vbnb(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        deposit(_strikeIndex: PromiseOrValue<BigNumberish>, _to: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        depositMultiple(_strikeIndices: PromiseOrValue<BigNumberish>[], _amounts: PromiseOrValue<BigNumberish>[], _to: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        purchase(_strikeIndex: PromiseOrValue<BigNumberish>, _amount: PromiseOrValue<BigNumberish>, _to: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        ssov(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        vbnb(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
