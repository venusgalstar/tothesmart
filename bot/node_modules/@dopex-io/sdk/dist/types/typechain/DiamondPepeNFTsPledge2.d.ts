import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export interface DiamondPepeNFTsPledge2Interface extends utils.Interface {
    functions: {
        "burnFloors(uint256[])": FunctionFragment;
        "burned(uint256)": FunctionFragment;
        "getPledge(uint256)": FunctionFragment;
        "getTarget()": FunctionFragment;
        "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
        "owner()": FunctionFragment;
        "pepes()": FunctionFragment;
        "percentPrecision()": FunctionFragment;
        "pledge(uint256[][])": FunctionFragment;
        "pledgeByIndex(uint256)": FunctionFragment;
        "pledgeIndex()": FunctionFragment;
        "pledged(uint256)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "targetHit()": FunctionFragment;
        "targetVote()": FunctionFragment;
        "totalPledged()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "burnFloors" | "burned" | "getPledge" | "getTarget" | "onERC721Received" | "owner" | "pepes" | "percentPrecision" | "pledge" | "pledgeByIndex" | "pledgeIndex" | "pledged" | "renounceOwnership" | "targetHit" | "targetVote" | "totalPledged" | "transferOwnership"): FunctionFragment;
    encodeFunctionData(functionFragment: "burnFloors", values: [PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "burned", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getPledge", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getTarget", values?: undefined): string;
    encodeFunctionData(functionFragment: "onERC721Received", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "pepes", values?: undefined): string;
    encodeFunctionData(functionFragment: "percentPrecision", values?: undefined): string;
    encodeFunctionData(functionFragment: "pledge", values: [PromiseOrValue<BigNumberish>[][]]): string;
    encodeFunctionData(functionFragment: "pledgeByIndex", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "pledgeIndex", values?: undefined): string;
    encodeFunctionData(functionFragment: "pledged", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "targetHit", values?: undefined): string;
    encodeFunctionData(functionFragment: "targetVote", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalPledged", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "burnFloors", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burned", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPledge", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTarget", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onERC721Received", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pepes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "percentPrecision", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pledge", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pledgeByIndex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pledgeIndex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pledged", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "targetHit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "targetVote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalPledged", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "LogBurn(uint256)": EventFragment;
        "LogNewPledge(address,uint256[],uint256)": EventFragment;
        "LogPledgedPepe(address,uint256,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "LogBurn"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LogNewPledge"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LogPledgedPepe"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
export interface LogBurnEventObject {
    tokenId: BigNumber;
}
export declare type LogBurnEvent = TypedEvent<[BigNumber], LogBurnEventObject>;
export declare type LogBurnEventFilter = TypedEventFilter<LogBurnEvent>;
export interface LogNewPledgeEventObject {
    pledgor: string;
    tokenIds: BigNumber[];
    index: BigNumber;
}
export declare type LogNewPledgeEvent = TypedEvent<[
    string,
    BigNumber[],
    BigNumber
], LogNewPledgeEventObject>;
export declare type LogNewPledgeEventFilter = TypedEventFilter<LogNewPledgeEvent>;
export interface LogPledgedPepeEventObject {
    pledgor: string;
    tokenId: BigNumber;
    index: BigNumber;
}
export declare type LogPledgedPepeEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber
], LogPledgedPepeEventObject>;
export declare type LogPledgedPepeEventFilter = TypedEventFilter<LogPledgedPepeEvent>;
export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export declare type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
export declare type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface DiamondPepeNFTsPledge2 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: DiamondPepeNFTsPledge2Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        burnFloors(tokenIds: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        burned(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        getPledge(pledgeId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber[]]>;
        getTarget(overrides?: CallOverrides): Promise<[BigNumber]>;
        onERC721Received(operator: PromiseOrValue<string>, from: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        pepes(overrides?: CallOverrides): Promise<[string]>;
        percentPrecision(overrides?: CallOverrides): Promise<[BigNumber]>;
        pledge(tokenIds: PromiseOrValue<BigNumberish>[][], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        pledgeByIndex(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            pledgor: string;
        }>;
        pledgeIndex(overrides?: CallOverrides): Promise<[BigNumber]>;
        pledged(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        targetHit(overrides?: CallOverrides): Promise<[boolean]>;
        targetVote(overrides?: CallOverrides): Promise<[BigNumber]>;
        totalPledged(overrides?: CallOverrides): Promise<[BigNumber]>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    burnFloors(tokenIds: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    burned(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    getPledge(pledgeId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber[]>;
    getTarget(overrides?: CallOverrides): Promise<BigNumber>;
    onERC721Received(operator: PromiseOrValue<string>, from: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    owner(overrides?: CallOverrides): Promise<string>;
    pepes(overrides?: CallOverrides): Promise<string>;
    percentPrecision(overrides?: CallOverrides): Promise<BigNumber>;
    pledge(tokenIds: PromiseOrValue<BigNumberish>[][], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    pledgeByIndex(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    pledgeIndex(overrides?: CallOverrides): Promise<BigNumber>;
    pledged(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    targetHit(overrides?: CallOverrides): Promise<boolean>;
    targetVote(overrides?: CallOverrides): Promise<BigNumber>;
    totalPledged(overrides?: CallOverrides): Promise<BigNumber>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        burnFloors(tokenIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<boolean>;
        burned(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        getPledge(pledgeId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber[]>;
        getTarget(overrides?: CallOverrides): Promise<BigNumber>;
        onERC721Received(operator: PromiseOrValue<string>, from: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        owner(overrides?: CallOverrides): Promise<string>;
        pepes(overrides?: CallOverrides): Promise<string>;
        percentPrecision(overrides?: CallOverrides): Promise<BigNumber>;
        pledge(tokenIds: PromiseOrValue<BigNumberish>[][], overrides?: CallOverrides): Promise<boolean>;
        pledgeByIndex(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        pledgeIndex(overrides?: CallOverrides): Promise<BigNumber>;
        pledged(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        targetHit(overrides?: CallOverrides): Promise<boolean>;
        targetVote(overrides?: CallOverrides): Promise<BigNumber>;
        totalPledged(overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "LogBurn(uint256)"(tokenId?: null): LogBurnEventFilter;
        LogBurn(tokenId?: null): LogBurnEventFilter;
        "LogNewPledge(address,uint256[],uint256)"(pledgor?: null, tokenIds?: null, index?: null): LogNewPledgeEventFilter;
        LogNewPledge(pledgor?: null, tokenIds?: null, index?: null): LogNewPledgeEventFilter;
        "LogPledgedPepe(address,uint256,uint256)"(pledgor?: null, tokenId?: null, index?: null): LogPledgedPepeEventFilter;
        LogPledgedPepe(pledgor?: null, tokenId?: null, index?: null): LogPledgedPepeEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
    };
    estimateGas: {
        burnFloors(tokenIds: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        burned(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getPledge(pledgeId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getTarget(overrides?: CallOverrides): Promise<BigNumber>;
        onERC721Received(operator: PromiseOrValue<string>, from: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        pepes(overrides?: CallOverrides): Promise<BigNumber>;
        percentPrecision(overrides?: CallOverrides): Promise<BigNumber>;
        pledge(tokenIds: PromiseOrValue<BigNumberish>[][], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        pledgeByIndex(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        pledgeIndex(overrides?: CallOverrides): Promise<BigNumber>;
        pledged(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        targetHit(overrides?: CallOverrides): Promise<BigNumber>;
        targetVote(overrides?: CallOverrides): Promise<BigNumber>;
        totalPledged(overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        burnFloors(tokenIds: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        burned(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPledge(pledgeId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        onERC721Received(operator: PromiseOrValue<string>, from: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pepes(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        percentPrecision(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pledge(tokenIds: PromiseOrValue<BigNumberish>[][], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        pledgeByIndex(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pledgeIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pledged(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        targetHit(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        targetVote(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        totalPledged(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
