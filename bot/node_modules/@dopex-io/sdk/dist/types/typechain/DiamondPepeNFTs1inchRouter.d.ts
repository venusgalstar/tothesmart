import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export declare namespace I1inchAggregationRouterV4 {
    type SwapDescriptionStruct = {
        srcToken: PromiseOrValue<string>;
        dstToken: PromiseOrValue<string>;
        srcReceiver: PromiseOrValue<string>;
        dstReceiver: PromiseOrValue<string>;
        amount: PromiseOrValue<BigNumberish>;
        minReturnAmount: PromiseOrValue<BigNumberish>;
        flags: PromiseOrValue<BigNumberish>;
        permit: PromiseOrValue<BytesLike>;
    };
    type SwapDescriptionStructOutput = [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string
    ] & {
        srcToken: string;
        dstToken: string;
        srcReceiver: string;
        dstReceiver: string;
        amount: BigNumber;
        minReturnAmount: BigNumber;
        flags: BigNumber;
        permit: string;
    };
}
export interface DiamondPepeNFTs1inchRouterInterface extends utils.Interface {
    functions: {
        "aggregationRouterV4()": FunctionFragment;
        "rdpx()": FunctionFragment;
        "swapAndDeposit(address,(address,address,address,address,uint256,uint256,uint256,bytes),bytes)": FunctionFragment;
        "yieldMint()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "aggregationRouterV4" | "rdpx" | "swapAndDeposit" | "yieldMint"): FunctionFragment;
    encodeFunctionData(functionFragment: "aggregationRouterV4", values?: undefined): string;
    encodeFunctionData(functionFragment: "rdpx", values?: undefined): string;
    encodeFunctionData(functionFragment: "swapAndDeposit", values: [
        PromiseOrValue<string>,
        I1inchAggregationRouterV4.SwapDescriptionStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "yieldMint", values?: undefined): string;
    decodeFunctionResult(functionFragment: "aggregationRouterV4", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rdpx", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "swapAndDeposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "yieldMint", data: BytesLike): Result;
    events: {};
}
export interface DiamondPepeNFTs1inchRouter extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: DiamondPepeNFTs1inchRouterInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        aggregationRouterV4(overrides?: CallOverrides): Promise<[string]>;
        rdpx(overrides?: CallOverrides): Promise<[string]>;
        swapAndDeposit(_caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        yieldMint(overrides?: CallOverrides): Promise<[string]>;
    };
    aggregationRouterV4(overrides?: CallOverrides): Promise<string>;
    rdpx(overrides?: CallOverrides): Promise<string>;
    swapAndDeposit(_caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    yieldMint(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        aggregationRouterV4(overrides?: CallOverrides): Promise<string>;
        rdpx(overrides?: CallOverrides): Promise<string>;
        swapAndDeposit(_caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        yieldMint(overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        aggregationRouterV4(overrides?: CallOverrides): Promise<BigNumber>;
        rdpx(overrides?: CallOverrides): Promise<BigNumber>;
        swapAndDeposit(_caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        yieldMint(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        aggregationRouterV4(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        rdpx(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        swapAndDeposit(_caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        yieldMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
