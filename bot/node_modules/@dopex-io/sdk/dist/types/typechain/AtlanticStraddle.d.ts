import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export declare namespace AtlanticStraddle {
    type AddressesStruct = {
        usd: PromiseOrValue<string>;
        underlying: PromiseOrValue<string>;
        assetSwapper: PromiseOrValue<string>;
        priceOracle: PromiseOrValue<string>;
        volatilityOracle: PromiseOrValue<string>;
        optionPricing: PromiseOrValue<string>;
        feeDistributor: PromiseOrValue<string>;
    };
    type AddressesStructOutput = [
        string,
        string,
        string,
        string,
        string,
        string,
        string
    ] & {
        usd: string;
        underlying: string;
        assetSwapper: string;
        priceOracle: string;
        volatilityOracle: string;
        optionPricing: string;
        feeDistributor: string;
    };
}
export interface AtlanticStraddleInterface extends utils.Interface {
    functions: {
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "MANAGER_ROLE()": FunctionFragment;
        "MAX_DELEGATION_FEE()": FunctionFragment;
        "MIN_PURCHASE_AMOUNT()": FunctionFragment;
        "PERCENT_PRECISION()": FunctionFragment;
        "USDC_DECIMALS()": FunctionFragment;
        "addToContractWhitelist(address)": FunctionFragment;
        "addresses()": FunctionFragment;
        "apFundingPercent()": FunctionFragment;
        "approve(address,uint256)": FunctionFragment;
        "balanceOf(address)": FunctionFragment;
        "blackoutPeriodBeforeExpiry()": FunctionFragment;
        "bootstrap(uint256)": FunctionFragment;
        "calculateApFunding(uint256,uint256,uint256)": FunctionFragment;
        "calculatePremium(bool,uint256,uint256,uint256)": FunctionFragment;
        "calculateStraddlePositionPnl(uint256)": FunctionFragment;
        "calculateWritePositionPnl(uint256)": FunctionFragment;
        "currentEpoch()": FunctionFragment;
        "deposit(uint256,bool,address)": FunctionFragment;
        "emergencyWithdraw(address[],bool)": FunctionFragment;
        "epochCollectionsData(uint256)": FunctionFragment;
        "epochData(uint256)": FunctionFragment;
        "expireEpoch()": FunctionFragment;
        "getApproved(uint256)": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "getUnderlyingPrice()": FunctionFragment;
        "getVolatility(uint256)": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "isApprovedForAll(address,address)": FunctionFragment;
        "isContract(address)": FunctionFragment;
        "isEpochExpired(uint256)": FunctionFragment;
        "isEpochPreExpired(uint256)": FunctionFragment;
        "isVaultReady(uint256)": FunctionFragment;
        "multirollover(uint256[])": FunctionFragment;
        "multisettle(uint256[])": FunctionFragment;
        "name()": FunctionFragment;
        "ownerOf(uint256)": FunctionFragment;
        "pause()": FunctionFragment;
        "paused()": FunctionFragment;
        "pnlSlippagePercent()": FunctionFragment;
        "preExpireEpoch(uint256,uint256)": FunctionFragment;
        "purchase(uint256,uint256,address)": FunctionFragment;
        "purchaseFeePercent()": FunctionFragment;
        "removeFromContractWhitelist(address)": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "rollover(uint256)": FunctionFragment;
        "safeTransferFrom(address,address,uint256)": FunctionFragment;
        "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
        "setAddresses((address,address,address,address,address,address,address))": FunctionFragment;
        "setApFunding(uint256)": FunctionFragment;
        "setApprovalForAll(address,bool)": FunctionFragment;
        "setBlackoutPeriodBeforeExpiry(uint256)": FunctionFragment;
        "setFeePercents(uint256,uint256,uint256)": FunctionFragment;
        "setPnlSlippagePercent(uint256)": FunctionFragment;
        "settle(uint256)": FunctionFragment;
        "settleDelegationFeePercent()": FunctionFragment;
        "settlementFeePercent()": FunctionFragment;
        "straddlePositions(uint256)": FunctionFragment;
        "straddlePositionsOfOwner(address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "symbol()": FunctionFragment;
        "toggleRollover(uint256)": FunctionFragment;
        "tokenByIndex(uint256)": FunctionFragment;
        "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
        "tokenURI(uint256)": FunctionFragment;
        "totalSupply()": FunctionFragment;
        "transferFrom(address,address,uint256)": FunctionFragment;
        "unpause()": FunctionFragment;
        "whitelistedContracts(address)": FunctionFragment;
        "withdraw(uint256)": FunctionFragment;
        "writePositions(uint256)": FunctionFragment;
        "writePositionsOfOwner(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "DEFAULT_ADMIN_ROLE" | "MANAGER_ROLE" | "MAX_DELEGATION_FEE" | "MIN_PURCHASE_AMOUNT" | "PERCENT_PRECISION" | "USDC_DECIMALS" | "addToContractWhitelist" | "addresses" | "apFundingPercent" | "approve" | "balanceOf" | "blackoutPeriodBeforeExpiry" | "bootstrap" | "calculateApFunding" | "calculatePremium" | "calculateStraddlePositionPnl" | "calculateWritePositionPnl" | "currentEpoch" | "deposit" | "emergencyWithdraw" | "epochCollectionsData" | "epochData" | "expireEpoch" | "getApproved" | "getRoleAdmin" | "getUnderlyingPrice" | "getVolatility" | "grantRole" | "hasRole" | "isApprovedForAll" | "isContract" | "isEpochExpired" | "isEpochPreExpired" | "isVaultReady" | "multirollover" | "multisettle" | "name" | "ownerOf" | "pause" | "paused" | "pnlSlippagePercent" | "preExpireEpoch" | "purchase" | "purchaseFeePercent" | "removeFromContractWhitelist" | "renounceRole" | "revokeRole" | "rollover" | "safeTransferFrom(address,address,uint256)" | "safeTransferFrom(address,address,uint256,bytes)" | "setAddresses" | "setApFunding" | "setApprovalForAll" | "setBlackoutPeriodBeforeExpiry" | "setFeePercents" | "setPnlSlippagePercent" | "settle" | "settleDelegationFeePercent" | "settlementFeePercent" | "straddlePositions" | "straddlePositionsOfOwner" | "supportsInterface" | "symbol" | "toggleRollover" | "tokenByIndex" | "tokenOfOwnerByIndex" | "tokenURI" | "totalSupply" | "transferFrom" | "unpause" | "whitelistedContracts" | "withdraw" | "writePositions" | "writePositionsOfOwner"): FunctionFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "MANAGER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "MAX_DELEGATION_FEE", values?: undefined): string;
    encodeFunctionData(functionFragment: "MIN_PURCHASE_AMOUNT", values?: undefined): string;
    encodeFunctionData(functionFragment: "PERCENT_PRECISION", values?: undefined): string;
    encodeFunctionData(functionFragment: "USDC_DECIMALS", values?: undefined): string;
    encodeFunctionData(functionFragment: "addToContractWhitelist", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "addresses", values?: undefined): string;
    encodeFunctionData(functionFragment: "apFundingPercent", values?: undefined): string;
    encodeFunctionData(functionFragment: "approve", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "blackoutPeriodBeforeExpiry", values?: undefined): string;
    encodeFunctionData(functionFragment: "bootstrap", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "calculateApFunding", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "calculatePremium", values: [
        PromiseOrValue<boolean>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "calculateStraddlePositionPnl", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "calculateWritePositionPnl", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "currentEpoch", values?: undefined): string;
    encodeFunctionData(functionFragment: "deposit", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<boolean>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "emergencyWithdraw", values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "epochCollectionsData", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "epochData", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "expireEpoch", values?: undefined): string;
    encodeFunctionData(functionFragment: "getApproved", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getUnderlyingPrice", values?: undefined): string;
    encodeFunctionData(functionFragment: "getVolatility", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isApprovedForAll", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isContract", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isEpochExpired", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isEpochPreExpired", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isVaultReady", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "multirollover", values: [PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "multisettle", values: [PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "ownerOf", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "pause", values?: undefined): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "pnlSlippagePercent", values?: undefined): string;
    encodeFunctionData(functionFragment: "preExpireEpoch", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "purchase", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "purchaseFeePercent", values?: undefined): string;
    encodeFunctionData(functionFragment: "removeFromContractWhitelist", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "rollover", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "safeTransferFrom(address,address,uint256)", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "safeTransferFrom(address,address,uint256,bytes)", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setAddresses", values: [AtlanticStraddle.AddressesStruct]): string;
    encodeFunctionData(functionFragment: "setApFunding", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setApprovalForAll", values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setBlackoutPeriodBeforeExpiry", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setFeePercents", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setPnlSlippagePercent", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "settle", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "settleDelegationFeePercent", values?: undefined): string;
    encodeFunctionData(functionFragment: "settlementFeePercent", values?: undefined): string;
    encodeFunctionData(functionFragment: "straddlePositions", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "straddlePositionsOfOwner", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "toggleRollover", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "tokenByIndex", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "tokenOfOwnerByIndex", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "tokenURI", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferFrom", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
    encodeFunctionData(functionFragment: "whitelistedContracts", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "withdraw", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "writePositions", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "writePositionsOfOwner", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MANAGER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MAX_DELEGATION_FEE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MIN_PURCHASE_AMOUNT", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PERCENT_PRECISION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "USDC_DECIMALS", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addToContractWhitelist", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addresses", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "apFundingPercent", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "blackoutPeriodBeforeExpiry", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "bootstrap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "calculateApFunding", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "calculatePremium", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "calculateStraddlePositionPnl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "calculateWritePositionPnl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "currentEpoch", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "emergencyWithdraw", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "epochCollectionsData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "epochData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "expireEpoch", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getApproved", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUnderlyingPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getVolatility", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isApprovedForAll", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isEpochExpired", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isEpochPreExpired", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isVaultReady", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multirollover", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multisettle", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pnlSlippagePercent", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "preExpireEpoch", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "purchaseFeePercent", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeFromContractWhitelist", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rollover", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeTransferFrom(address,address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeTransferFrom(address,address,uint256,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAddresses", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setApFunding", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setApprovalForAll", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setBlackoutPeriodBeforeExpiry", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setFeePercents", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPnlSlippagePercent", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "settleDelegationFeePercent", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "settlementFeePercent", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "straddlePositions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "straddlePositionsOfOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "toggleRollover", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tokenByIndex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tokenOfOwnerByIndex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "whitelistedContracts", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "writePositions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "writePositionsOfOwner", data: BytesLike): Result;
    events: {
        "AddToContractWhitelist(address)": EventFragment;
        "Approval(address,address,uint256)": EventFragment;
        "ApprovalForAll(address,address,bool)": EventFragment;
        "Bootstrap(uint256)": EventFragment;
        "Deposit(uint256,uint256,bool,address,address,uint256)": EventFragment;
        "EpochExpired(address)": EventFragment;
        "EpochPreExpired(address)": EventFragment;
        "Paused(address)": EventFragment;
        "Purchase(address,uint256,uint256)": EventFragment;
        "RemoveFromContractWhitelist(address)": EventFragment;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
        "SetAddresses(tuple)": EventFragment;
        "SetApFunding(uint256)": EventFragment;
        "SetBlackoutPeriod(uint256)": EventFragment;
        "SetFeePercents(uint256,uint256,uint256)": EventFragment;
        "SetPnlSlippagePercent(uint256)": EventFragment;
        "Settle(address,address,uint256,uint256)": EventFragment;
        "ToggleRollover(uint256,bool)": EventFragment;
        "Transfer(address,address,uint256)": EventFragment;
        "Unpaused(address)": EventFragment;
        "Withdraw(address,uint256,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AddToContractWhitelist"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Bootstrap"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "EpochExpired"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "EpochPreExpired"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Purchase"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RemoveFromContractWhitelist"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetAddresses"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetApFunding"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetBlackoutPeriod"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetFeePercents"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPnlSlippagePercent"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Settle"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ToggleRollover"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}
export interface AddToContractWhitelistEventObject {
    _contract: string;
}
export declare type AddToContractWhitelistEvent = TypedEvent<[
    string
], AddToContractWhitelistEventObject>;
export declare type AddToContractWhitelistEventFilter = TypedEventFilter<AddToContractWhitelistEvent>;
export interface ApprovalEventObject {
    owner: string;
    approved: string;
    tokenId: BigNumber;
}
export declare type ApprovalEvent = TypedEvent<[
    string,
    string,
    BigNumber
], ApprovalEventObject>;
export declare type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;
export interface ApprovalForAllEventObject {
    owner: string;
    operator: string;
    approved: boolean;
}
export declare type ApprovalForAllEvent = TypedEvent<[
    string,
    string,
    boolean
], ApprovalForAllEventObject>;
export declare type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;
export interface BootstrapEventObject {
    epoch: BigNumber;
}
export declare type BootstrapEvent = TypedEvent<[BigNumber], BootstrapEventObject>;
export declare type BootstrapEventFilter = TypedEventFilter<BootstrapEvent>;
export interface DepositEventObject {
    epoch: BigNumber;
    amount: BigNumber;
    rollover: boolean;
    user: string;
    sender: string;
    tokenId: BigNumber;
}
export declare type DepositEvent = TypedEvent<[
    BigNumber,
    BigNumber,
    boolean,
    string,
    string,
    BigNumber
], DepositEventObject>;
export declare type DepositEventFilter = TypedEventFilter<DepositEvent>;
export interface EpochExpiredEventObject {
    caller: string;
}
export declare type EpochExpiredEvent = TypedEvent<[string], EpochExpiredEventObject>;
export declare type EpochExpiredEventFilter = TypedEventFilter<EpochExpiredEvent>;
export interface EpochPreExpiredEventObject {
    caller: string;
}
export declare type EpochPreExpiredEvent = TypedEvent<[
    string
], EpochPreExpiredEventObject>;
export declare type EpochPreExpiredEventFilter = TypedEventFilter<EpochPreExpiredEvent>;
export interface PausedEventObject {
    account: string;
}
export declare type PausedEvent = TypedEvent<[string], PausedEventObject>;
export declare type PausedEventFilter = TypedEventFilter<PausedEvent>;
export interface PurchaseEventObject {
    user: string;
    straddleId: BigNumber;
    cost: BigNumber;
}
export declare type PurchaseEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber
], PurchaseEventObject>;
export declare type PurchaseEventFilter = TypedEventFilter<PurchaseEvent>;
export interface RemoveFromContractWhitelistEventObject {
    _contract: string;
}
export declare type RemoveFromContractWhitelistEvent = TypedEvent<[
    string
], RemoveFromContractWhitelistEventObject>;
export declare type RemoveFromContractWhitelistEventFilter = TypedEventFilter<RemoveFromContractWhitelistEvent>;
export interface RoleAdminChangedEventObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
}
export declare type RoleAdminChangedEvent = TypedEvent<[
    string,
    string,
    string
], RoleAdminChangedEventObject>;
export declare type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;
export interface RoleGrantedEventObject {
    role: string;
    account: string;
    sender: string;
}
export declare type RoleGrantedEvent = TypedEvent<[
    string,
    string,
    string
], RoleGrantedEventObject>;
export declare type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;
export interface RoleRevokedEventObject {
    role: string;
    account: string;
    sender: string;
}
export declare type RoleRevokedEvent = TypedEvent<[
    string,
    string,
    string
], RoleRevokedEventObject>;
export declare type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;
export interface SetAddressesEventObject {
    addresses: AtlanticStraddle.AddressesStructOutput;
}
export declare type SetAddressesEvent = TypedEvent<[
    AtlanticStraddle.AddressesStructOutput
], SetAddressesEventObject>;
export declare type SetAddressesEventFilter = TypedEventFilter<SetAddressesEvent>;
export interface SetApFundingEventObject {
    apFunding: BigNumber;
}
export declare type SetApFundingEvent = TypedEvent<[
    BigNumber
], SetApFundingEventObject>;
export declare type SetApFundingEventFilter = TypedEventFilter<SetApFundingEvent>;
export interface SetBlackoutPeriodEventObject {
    period: BigNumber;
}
export declare type SetBlackoutPeriodEvent = TypedEvent<[
    BigNumber
], SetBlackoutPeriodEventObject>;
export declare type SetBlackoutPeriodEventFilter = TypedEventFilter<SetBlackoutPeriodEvent>;
export interface SetFeePercentsEventObject {
    purchaseFeePercent: BigNumber;
    settlementFeePercent: BigNumber;
    settleDelegationFeePercent: BigNumber;
}
export declare type SetFeePercentsEvent = TypedEvent<[
    BigNumber,
    BigNumber,
    BigNumber
], SetFeePercentsEventObject>;
export declare type SetFeePercentsEventFilter = TypedEventFilter<SetFeePercentsEvent>;
export interface SetPnlSlippagePercentEventObject {
    pnlSlippagePercent: BigNumber;
}
export declare type SetPnlSlippagePercentEvent = TypedEvent<[
    BigNumber
], SetPnlSlippagePercentEventObject>;
export declare type SetPnlSlippagePercentEventFilter = TypedEventFilter<SetPnlSlippagePercentEvent>;
export interface SettleEventObject {
    sender: string;
    owner: string;
    id: BigNumber;
    pnl: BigNumber;
}
export declare type SettleEvent = TypedEvent<[
    string,
    string,
    BigNumber,
    BigNumber
], SettleEventObject>;
export declare type SettleEventFilter = TypedEventFilter<SettleEvent>;
export interface ToggleRolloverEventObject {
    id: BigNumber;
    rollover: boolean;
}
export declare type ToggleRolloverEvent = TypedEvent<[
    BigNumber,
    boolean
], ToggleRolloverEventObject>;
export declare type ToggleRolloverEventFilter = TypedEventFilter<ToggleRolloverEvent>;
export interface TransferEventObject {
    from: string;
    to: string;
    tokenId: BigNumber;
}
export declare type TransferEvent = TypedEvent<[
    string,
    string,
    BigNumber
], TransferEventObject>;
export declare type TransferEventFilter = TypedEventFilter<TransferEvent>;
export interface UnpausedEventObject {
    account: string;
}
export declare type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;
export declare type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;
export interface WithdrawEventObject {
    sender: string;
    id: BigNumber;
    pnl: BigNumber;
}
export declare type WithdrawEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber
], WithdrawEventObject>;
export declare type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;
export interface AtlanticStraddle extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: AtlanticStraddleInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;
        MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;
        MAX_DELEGATION_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;
        MIN_PURCHASE_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;
        PERCENT_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;
        USDC_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;
        addToContractWhitelist(_contract: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        addresses(overrides?: CallOverrides): Promise<[
            string,
            string,
            string,
            string,
            string,
            string,
            string
        ] & {
            usd: string;
            underlying: string;
            assetSwapper: string;
            priceOracle: string;
            volatilityOracle: string;
            optionPricing: string;
            feeDistributor: string;
        }>;
        apFundingPercent(overrides?: CallOverrides): Promise<[BigNumber]>;
        approve(to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        blackoutPeriodBeforeExpiry(overrides?: CallOverrides): Promise<[BigNumber]>;
        bootstrap(expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        calculateApFunding(_price: PromiseOrValue<BigNumberish>, _amount: PromiseOrValue<BigNumberish>, _timeToExpiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            funding: BigNumber;
        }>;
        calculatePremium(_isPut: PromiseOrValue<boolean>, _strike: PromiseOrValue<BigNumberish>, _amount: PromiseOrValue<BigNumberish>, _expiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            premium: BigNumber;
        }>;
        calculateStraddlePositionPnl(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            buyerPnl: BigNumber;
        }>;
        calculateWritePositionPnl(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            writePositionPnl: BigNumber;
        }>;
        currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;
        deposit(amount: PromiseOrValue<BigNumberish>, shouldRollover: PromiseOrValue<boolean>, user: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        emergencyWithdraw(tokens: PromiseOrValue<string>[], transferNative: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        epochCollectionsData(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            usdPremiums: BigNumber;
            usdFunding: BigNumber;
            totalSold: BigNumber;
            straddleCounter: BigNumber;
            finalUsdBalanceBeforeWithdaw: BigNumber;
        }>;
        epochData(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            startTime: BigNumber;
            expiry: BigNumber;
            usdDeposits: BigNumber;
            activeUsdDeposits: BigNumber;
            settlementPrice: BigNumber;
            settlementPercentage: BigNumber;
            underlyingPurchased: BigNumber;
        }>;
        expireEpoch(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        getUnderlyingPrice(overrides?: CallOverrides): Promise<[BigNumber]>;
        getVolatility(_strike: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isApprovedForAll(owner: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isContract(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isEpochExpired(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        isEpochPreExpired(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        isVaultReady(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        multirollover(ids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        multisettle(ids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        name(overrides?: CallOverrides): Promise<[string]>;
        ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        pause(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        paused(overrides?: CallOverrides): Promise<[boolean]>;
        pnlSlippagePercent(overrides?: CallOverrides): Promise<[BigNumber]>;
        preExpireEpoch(percentage: PromiseOrValue<BigNumberish>, swapperId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        purchase(amount: PromiseOrValue<BigNumberish>, swapperId: PromiseOrValue<BigNumberish>, user: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        purchaseFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;
        removeFromContractWhitelist(_contract: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        renounceRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        rollover(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "safeTransferFrom(address,address,uint256)"(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "safeTransferFrom(address,address,uint256,bytes)"(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setAddresses(_addresses: AtlanticStraddle.AddressesStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setApFunding(_apFundingPercent: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setBlackoutPeriodBeforeExpiry(period: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setFeePercents(_purchaseFeePercent: PromiseOrValue<BigNumberish>, _settlementFeePercent: PromiseOrValue<BigNumberish>, _settleDelegationFeePercent: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPnlSlippagePercent(_pnlSlippagePercent: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        settle(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        settleDelegationFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;
        settlementFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;
        straddlePositions(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            epoch: BigNumber;
            amount: BigNumber;
            apStrike: BigNumber;
            underlyingPurchased: BigNumber;
        }>;
        straddlePositionsOfOwner(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber[]] & {
            tokenIds: BigNumber[];
        }>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        symbol(overrides?: CallOverrides): Promise<[string]>;
        toggleRollover(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        tokenByIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        tokenOfOwnerByIndex(owner: PromiseOrValue<string>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
        transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        unpause(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        whitelistedContracts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        withdraw(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        writePositions(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            boolean
        ] & {
            epoch: BigNumber;
            usdDeposit: BigNumber;
            rollover: boolean;
        }>;
        writePositionsOfOwner(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber[]] & {
            tokenIds: BigNumber[];
        }>;
    };
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
    MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;
    MAX_DELEGATION_FEE(overrides?: CallOverrides): Promise<BigNumber>;
    MIN_PURCHASE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;
    PERCENT_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;
    USDC_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;
    addToContractWhitelist(_contract: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    addresses(overrides?: CallOverrides): Promise<[
        string,
        string,
        string,
        string,
        string,
        string,
        string
    ] & {
        usd: string;
        underlying: string;
        assetSwapper: string;
        priceOracle: string;
        volatilityOracle: string;
        optionPricing: string;
        feeDistributor: string;
    }>;
    apFundingPercent(overrides?: CallOverrides): Promise<BigNumber>;
    approve(to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    blackoutPeriodBeforeExpiry(overrides?: CallOverrides): Promise<BigNumber>;
    bootstrap(expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    calculateApFunding(_price: PromiseOrValue<BigNumberish>, _amount: PromiseOrValue<BigNumberish>, _timeToExpiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    calculatePremium(_isPut: PromiseOrValue<boolean>, _strike: PromiseOrValue<BigNumberish>, _amount: PromiseOrValue<BigNumberish>, _expiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    calculateStraddlePositionPnl(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    calculateWritePositionPnl(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;
    deposit(amount: PromiseOrValue<BigNumberish>, shouldRollover: PromiseOrValue<boolean>, user: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    emergencyWithdraw(tokens: PromiseOrValue<string>[], transferNative: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    epochCollectionsData(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        usdPremiums: BigNumber;
        usdFunding: BigNumber;
        totalSold: BigNumber;
        straddleCounter: BigNumber;
        finalUsdBalanceBeforeWithdaw: BigNumber;
    }>;
    epochData(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        startTime: BigNumber;
        expiry: BigNumber;
        usdDeposits: BigNumber;
        activeUsdDeposits: BigNumber;
        settlementPrice: BigNumber;
        settlementPercentage: BigNumber;
        underlyingPurchased: BigNumber;
    }>;
    expireEpoch(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    getUnderlyingPrice(overrides?: CallOverrides): Promise<BigNumber>;
    getVolatility(_strike: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isApprovedForAll(owner: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isContract(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isEpochExpired(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    isEpochPreExpired(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    isVaultReady(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    multirollover(ids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    multisettle(ids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    name(overrides?: CallOverrides): Promise<string>;
    ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    pause(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    paused(overrides?: CallOverrides): Promise<boolean>;
    pnlSlippagePercent(overrides?: CallOverrides): Promise<BigNumber>;
    preExpireEpoch(percentage: PromiseOrValue<BigNumberish>, swapperId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    purchase(amount: PromiseOrValue<BigNumberish>, swapperId: PromiseOrValue<BigNumberish>, user: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    purchaseFeePercent(overrides?: CallOverrides): Promise<BigNumber>;
    removeFromContractWhitelist(_contract: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    renounceRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    rollover(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "safeTransferFrom(address,address,uint256)"(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "safeTransferFrom(address,address,uint256,bytes)"(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setAddresses(_addresses: AtlanticStraddle.AddressesStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setApFunding(_apFundingPercent: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setBlackoutPeriodBeforeExpiry(period: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setFeePercents(_purchaseFeePercent: PromiseOrValue<BigNumberish>, _settlementFeePercent: PromiseOrValue<BigNumberish>, _settleDelegationFeePercent: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPnlSlippagePercent(_pnlSlippagePercent: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    settle(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    settleDelegationFeePercent(overrides?: CallOverrides): Promise<BigNumber>;
    settlementFeePercent(overrides?: CallOverrides): Promise<BigNumber>;
    straddlePositions(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        epoch: BigNumber;
        amount: BigNumber;
        apStrike: BigNumber;
        underlyingPurchased: BigNumber;
    }>;
    straddlePositionsOfOwner(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber[]>;
    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    symbol(overrides?: CallOverrides): Promise<string>;
    toggleRollover(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    tokenByIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    tokenOfOwnerByIndex(owner: PromiseOrValue<string>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
    transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    unpause(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    whitelistedContracts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    withdraw(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    writePositions(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber,
        boolean
    ] & {
        epoch: BigNumber;
        usdDeposit: BigNumber;
        rollover: boolean;
    }>;
    writePositionsOfOwner(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber[]>;
    callStatic: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
        MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;
        MAX_DELEGATION_FEE(overrides?: CallOverrides): Promise<BigNumber>;
        MIN_PURCHASE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;
        PERCENT_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;
        USDC_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;
        addToContractWhitelist(_contract: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        addresses(overrides?: CallOverrides): Promise<[
            string,
            string,
            string,
            string,
            string,
            string,
            string
        ] & {
            usd: string;
            underlying: string;
            assetSwapper: string;
            priceOracle: string;
            volatilityOracle: string;
            optionPricing: string;
            feeDistributor: string;
        }>;
        apFundingPercent(overrides?: CallOverrides): Promise<BigNumber>;
        approve(to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        blackoutPeriodBeforeExpiry(overrides?: CallOverrides): Promise<BigNumber>;
        bootstrap(expiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        calculateApFunding(_price: PromiseOrValue<BigNumberish>, _amount: PromiseOrValue<BigNumberish>, _timeToExpiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        calculatePremium(_isPut: PromiseOrValue<boolean>, _strike: PromiseOrValue<BigNumberish>, _amount: PromiseOrValue<BigNumberish>, _expiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        calculateStraddlePositionPnl(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        calculateWritePositionPnl(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;
        deposit(amount: PromiseOrValue<BigNumberish>, shouldRollover: PromiseOrValue<boolean>, user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        emergencyWithdraw(tokens: PromiseOrValue<string>[], transferNative: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        epochCollectionsData(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            usdPremiums: BigNumber;
            usdFunding: BigNumber;
            totalSold: BigNumber;
            straddleCounter: BigNumber;
            finalUsdBalanceBeforeWithdaw: BigNumber;
        }>;
        epochData(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            startTime: BigNumber;
            expiry: BigNumber;
            usdDeposits: BigNumber;
            activeUsdDeposits: BigNumber;
            settlementPrice: BigNumber;
            settlementPercentage: BigNumber;
            underlyingPurchased: BigNumber;
        }>;
        expireEpoch(overrides?: CallOverrides): Promise<boolean>;
        getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        getUnderlyingPrice(overrides?: CallOverrides): Promise<BigNumber>;
        getVolatility(_strike: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isApprovedForAll(owner: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isContract(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isEpochExpired(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        isEpochPreExpired(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        isVaultReady(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        multirollover(ids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<BigNumber[]>;
        multisettle(ids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<BigNumber[]>;
        name(overrides?: CallOverrides): Promise<string>;
        ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        pause(overrides?: CallOverrides): Promise<void>;
        paused(overrides?: CallOverrides): Promise<boolean>;
        pnlSlippagePercent(overrides?: CallOverrides): Promise<BigNumber>;
        preExpireEpoch(percentage: PromiseOrValue<BigNumberish>, swapperId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        purchase(amount: PromiseOrValue<BigNumberish>, swapperId: PromiseOrValue<BigNumberish>, user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        purchaseFeePercent(overrides?: CallOverrides): Promise<BigNumber>;
        removeFromContractWhitelist(_contract: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        renounceRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        rollover(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        "safeTransferFrom(address,address,uint256)"(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        "safeTransferFrom(address,address,uint256,bytes)"(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setAddresses(_addresses: AtlanticStraddle.AddressesStruct, overrides?: CallOverrides): Promise<void>;
        setApFunding(_apFundingPercent: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setBlackoutPeriodBeforeExpiry(period: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        setFeePercents(_purchaseFeePercent: PromiseOrValue<BigNumberish>, _settlementFeePercent: PromiseOrValue<BigNumberish>, _settleDelegationFeePercent: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPnlSlippagePercent(_pnlSlippagePercent: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        settle(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        settleDelegationFeePercent(overrides?: CallOverrides): Promise<BigNumber>;
        settlementFeePercent(overrides?: CallOverrides): Promise<BigNumber>;
        straddlePositions(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            epoch: BigNumber;
            amount: BigNumber;
            apStrike: BigNumber;
            underlyingPurchased: BigNumber;
        }>;
        straddlePositionsOfOwner(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber[]>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        symbol(overrides?: CallOverrides): Promise<string>;
        toggleRollover(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        tokenByIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        tokenOfOwnerByIndex(owner: PromiseOrValue<string>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
        transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        unpause(overrides?: CallOverrides): Promise<void>;
        whitelistedContracts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        withdraw(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        writePositions(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            boolean
        ] & {
            epoch: BigNumber;
            usdDeposit: BigNumber;
            rollover: boolean;
        }>;
        writePositionsOfOwner(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber[]>;
    };
    filters: {
        "AddToContractWhitelist(address)"(_contract?: PromiseOrValue<string> | null): AddToContractWhitelistEventFilter;
        AddToContractWhitelist(_contract?: PromiseOrValue<string> | null): AddToContractWhitelistEventFilter;
        "Approval(address,address,uint256)"(owner?: PromiseOrValue<string> | null, approved?: PromiseOrValue<string> | null, tokenId?: PromiseOrValue<BigNumberish> | null): ApprovalEventFilter;
        Approval(owner?: PromiseOrValue<string> | null, approved?: PromiseOrValue<string> | null, tokenId?: PromiseOrValue<BigNumberish> | null): ApprovalEventFilter;
        "ApprovalForAll(address,address,bool)"(owner?: PromiseOrValue<string> | null, operator?: PromiseOrValue<string> | null, approved?: null): ApprovalForAllEventFilter;
        ApprovalForAll(owner?: PromiseOrValue<string> | null, operator?: PromiseOrValue<string> | null, approved?: null): ApprovalForAllEventFilter;
        "Bootstrap(uint256)"(epoch?: null): BootstrapEventFilter;
        Bootstrap(epoch?: null): BootstrapEventFilter;
        "Deposit(uint256,uint256,bool,address,address,uint256)"(epoch?: null, amount?: null, rollover?: null, user?: null, sender?: null, tokenId?: null): DepositEventFilter;
        Deposit(epoch?: null, amount?: null, rollover?: null, user?: null, sender?: null, tokenId?: null): DepositEventFilter;
        "EpochExpired(address)"(caller?: null): EpochExpiredEventFilter;
        EpochExpired(caller?: null): EpochExpiredEventFilter;
        "EpochPreExpired(address)"(caller?: null): EpochPreExpiredEventFilter;
        EpochPreExpired(caller?: null): EpochPreExpiredEventFilter;
        "Paused(address)"(account?: null): PausedEventFilter;
        Paused(account?: null): PausedEventFilter;
        "Purchase(address,uint256,uint256)"(user?: null, straddleId?: null, cost?: null): PurchaseEventFilter;
        Purchase(user?: null, straddleId?: null, cost?: null): PurchaseEventFilter;
        "RemoveFromContractWhitelist(address)"(_contract?: PromiseOrValue<string> | null): RemoveFromContractWhitelistEventFilter;
        RemoveFromContractWhitelist(_contract?: PromiseOrValue<string> | null): RemoveFromContractWhitelistEventFilter;
        "RoleAdminChanged(bytes32,bytes32,bytes32)"(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter;
        RoleAdminChanged(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter;
        "RoleGranted(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter;
        RoleGranted(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter;
        "RoleRevoked(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter;
        RoleRevoked(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter;
        "SetAddresses(tuple)"(addresses?: null): SetAddressesEventFilter;
        SetAddresses(addresses?: null): SetAddressesEventFilter;
        "SetApFunding(uint256)"(apFunding?: null): SetApFundingEventFilter;
        SetApFunding(apFunding?: null): SetApFundingEventFilter;
        "SetBlackoutPeriod(uint256)"(period?: null): SetBlackoutPeriodEventFilter;
        SetBlackoutPeriod(period?: null): SetBlackoutPeriodEventFilter;
        "SetFeePercents(uint256,uint256,uint256)"(purchaseFeePercent?: null, settlementFeePercent?: null, settleDelegationFeePercent?: null): SetFeePercentsEventFilter;
        SetFeePercents(purchaseFeePercent?: null, settlementFeePercent?: null, settleDelegationFeePercent?: null): SetFeePercentsEventFilter;
        "SetPnlSlippagePercent(uint256)"(pnlSlippagePercent?: null): SetPnlSlippagePercentEventFilter;
        SetPnlSlippagePercent(pnlSlippagePercent?: null): SetPnlSlippagePercentEventFilter;
        "Settle(address,address,uint256,uint256)"(sender?: PromiseOrValue<string> | null, owner?: PromiseOrValue<string> | null, id?: null, pnl?: null): SettleEventFilter;
        Settle(sender?: PromiseOrValue<string> | null, owner?: PromiseOrValue<string> | null, id?: null, pnl?: null): SettleEventFilter;
        "ToggleRollover(uint256,bool)"(id?: null, rollover?: null): ToggleRolloverEventFilter;
        ToggleRollover(id?: null, rollover?: null): ToggleRolloverEventFilter;
        "Transfer(address,address,uint256)"(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, tokenId?: PromiseOrValue<BigNumberish> | null): TransferEventFilter;
        Transfer(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, tokenId?: PromiseOrValue<BigNumberish> | null): TransferEventFilter;
        "Unpaused(address)"(account?: null): UnpausedEventFilter;
        Unpaused(account?: null): UnpausedEventFilter;
        "Withdraw(address,uint256,uint256)"(sender?: PromiseOrValue<string> | null, id?: null, pnl?: null): WithdrawEventFilter;
        Withdraw(sender?: PromiseOrValue<string> | null, id?: null, pnl?: null): WithdrawEventFilter;
    };
    estimateGas: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
        MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
        MAX_DELEGATION_FEE(overrides?: CallOverrides): Promise<BigNumber>;
        MIN_PURCHASE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;
        PERCENT_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;
        USDC_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;
        addToContractWhitelist(_contract: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        addresses(overrides?: CallOverrides): Promise<BigNumber>;
        apFundingPercent(overrides?: CallOverrides): Promise<BigNumber>;
        approve(to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        blackoutPeriodBeforeExpiry(overrides?: CallOverrides): Promise<BigNumber>;
        bootstrap(expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        calculateApFunding(_price: PromiseOrValue<BigNumberish>, _amount: PromiseOrValue<BigNumberish>, _timeToExpiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        calculatePremium(_isPut: PromiseOrValue<boolean>, _strike: PromiseOrValue<BigNumberish>, _amount: PromiseOrValue<BigNumberish>, _expiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        calculateStraddlePositionPnl(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        calculateWritePositionPnl(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;
        deposit(amount: PromiseOrValue<BigNumberish>, shouldRollover: PromiseOrValue<boolean>, user: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        emergencyWithdraw(tokens: PromiseOrValue<string>[], transferNative: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        epochCollectionsData(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        epochData(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        expireEpoch(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getUnderlyingPrice(overrides?: CallOverrides): Promise<BigNumber>;
        getVolatility(_strike: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isApprovedForAll(owner: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isContract(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isEpochExpired(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isEpochPreExpired(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isVaultReady(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        multirollover(ids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        multisettle(ids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        name(overrides?: CallOverrides): Promise<BigNumber>;
        ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        pause(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        paused(overrides?: CallOverrides): Promise<BigNumber>;
        pnlSlippagePercent(overrides?: CallOverrides): Promise<BigNumber>;
        preExpireEpoch(percentage: PromiseOrValue<BigNumberish>, swapperId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        purchase(amount: PromiseOrValue<BigNumberish>, swapperId: PromiseOrValue<BigNumberish>, user: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        purchaseFeePercent(overrides?: CallOverrides): Promise<BigNumber>;
        removeFromContractWhitelist(_contract: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        renounceRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        rollover(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "safeTransferFrom(address,address,uint256)"(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "safeTransferFrom(address,address,uint256,bytes)"(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setAddresses(_addresses: AtlanticStraddle.AddressesStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setApFunding(_apFundingPercent: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setBlackoutPeriodBeforeExpiry(period: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setFeePercents(_purchaseFeePercent: PromiseOrValue<BigNumberish>, _settlementFeePercent: PromiseOrValue<BigNumberish>, _settleDelegationFeePercent: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPnlSlippagePercent(_pnlSlippagePercent: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        settle(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        settleDelegationFeePercent(overrides?: CallOverrides): Promise<BigNumber>;
        settlementFeePercent(overrides?: CallOverrides): Promise<BigNumber>;
        straddlePositions(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        straddlePositionsOfOwner(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        symbol(overrides?: CallOverrides): Promise<BigNumber>;
        toggleRollover(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        tokenByIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        tokenOfOwnerByIndex(owner: PromiseOrValue<string>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
        transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        unpause(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        whitelistedContracts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        withdraw(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        writePositions(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        writePositionsOfOwner(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        MANAGER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        MAX_DELEGATION_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        MIN_PURCHASE_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        PERCENT_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        USDC_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        addToContractWhitelist(_contract: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        addresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        apFundingPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        approve(to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        blackoutPeriodBeforeExpiry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        bootstrap(expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        calculateApFunding(_price: PromiseOrValue<BigNumberish>, _amount: PromiseOrValue<BigNumberish>, _timeToExpiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        calculatePremium(_isPut: PromiseOrValue<boolean>, _strike: PromiseOrValue<BigNumberish>, _amount: PromiseOrValue<BigNumberish>, _expiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        calculateStraddlePositionPnl(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        calculateWritePositionPnl(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deposit(amount: PromiseOrValue<BigNumberish>, shouldRollover: PromiseOrValue<boolean>, user: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        emergencyWithdraw(tokens: PromiseOrValue<string>[], transferNative: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        epochCollectionsData(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        epochData(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        expireEpoch(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getUnderlyingPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getVolatility(_strike: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isApprovedForAll(owner: PromiseOrValue<string>, operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isContract(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isEpochExpired(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isEpochPreExpired(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isVaultReady(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        multirollover(ids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        multisettle(ids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pause(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pnlSlippagePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        preExpireEpoch(percentage: PromiseOrValue<BigNumberish>, swapperId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        purchase(amount: PromiseOrValue<BigNumberish>, swapperId: PromiseOrValue<BigNumberish>, user: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        purchaseFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        removeFromContractWhitelist(_contract: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        renounceRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        rollover(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "safeTransferFrom(address,address,uint256)"(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "safeTransferFrom(address,address,uint256,bytes)"(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setAddresses(_addresses: AtlanticStraddle.AddressesStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setApFunding(_apFundingPercent: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setApprovalForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setBlackoutPeriodBeforeExpiry(period: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setFeePercents(_purchaseFeePercent: PromiseOrValue<BigNumberish>, _settlementFeePercent: PromiseOrValue<BigNumberish>, _settleDelegationFeePercent: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPnlSlippagePercent(_pnlSlippagePercent: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        settle(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        settleDelegationFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        settlementFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        straddlePositions(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        straddlePositionsOfOwner(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        toggleRollover(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        tokenByIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        tokenOfOwnerByIndex(owner: PromiseOrValue<string>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        unpause(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        whitelistedContracts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdraw(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        writePositions(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        writePositionsOfOwner(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
