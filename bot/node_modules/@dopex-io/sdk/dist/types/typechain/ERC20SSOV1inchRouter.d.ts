import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export declare namespace I1inchAggregationRouterV4 {
    type SwapDescriptionStruct = {
        srcToken: PromiseOrValue<string>;
        dstToken: PromiseOrValue<string>;
        srcReceiver: PromiseOrValue<string>;
        dstReceiver: PromiseOrValue<string>;
        amount: PromiseOrValue<BigNumberish>;
        minReturnAmount: PromiseOrValue<BigNumberish>;
        flags: PromiseOrValue<BigNumberish>;
        permit: PromiseOrValue<BytesLike>;
    };
    type SwapDescriptionStructOutput = [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string
    ] & {
        srcToken: string;
        dstToken: string;
        srcReceiver: string;
        dstReceiver: string;
        amount: BigNumber;
        minReturnAmount: BigNumber;
        flags: BigNumber;
        permit: string;
    };
}
export declare namespace ERC20SSOV1inchRouter {
    type PurchaseOptionStruct = {
        strikeIndex: PromiseOrValue<BigNumberish>;
        amount: PromiseOrValue<BigNumberish>;
        to: PromiseOrValue<string>;
    };
    type PurchaseOptionStructOutput = [BigNumber, BigNumber, string] & {
        strikeIndex: BigNumber;
        amount: BigNumber;
        to: string;
    };
}
export interface ERC20SSOV1inchRouterInterface extends utils.Interface {
    functions: {
        "aggregationRouterV4()": FunctionFragment;
        "swapAndDeposit(address,address,address,(address,address,address,address,uint256,uint256,uint256,bytes),bytes,uint256,address)": FunctionFragment;
        "swapAndDepositMultiple(address,address,address,(address,address,address,address,uint256,uint256,uint256,bytes),bytes,uint256[],uint256[],address)": FunctionFragment;
        "swapAndPurchase(address,address,address,(address,address,address,address,uint256,uint256,uint256,bytes),bytes,(uint256,uint256,address))": FunctionFragment;
        "swapNativeAndDeposit(address,address,address,(address,address,address,address,uint256,uint256,uint256,bytes),bytes,uint256,address)": FunctionFragment;
        "swapNativeAndDepositMultiple(address,address,address,(address,address,address,address,uint256,uint256,uint256,bytes),bytes,uint256[],uint256[],address)": FunctionFragment;
        "swapNativeAndPurchase(address,address,address,(address,address,address,address,uint256,uint256,uint256,bytes),bytes,(uint256,uint256,address))": FunctionFragment;
        "wrappedNativeToken()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "aggregationRouterV4" | "swapAndDeposit" | "swapAndDepositMultiple" | "swapAndPurchase" | "swapNativeAndDeposit" | "swapNativeAndDepositMultiple" | "swapNativeAndPurchase" | "wrappedNativeToken"): FunctionFragment;
    encodeFunctionData(functionFragment: "aggregationRouterV4", values?: undefined): string;
    encodeFunctionData(functionFragment: "swapAndDeposit", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        I1inchAggregationRouterV4.SwapDescriptionStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "swapAndDepositMultiple", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        I1inchAggregationRouterV4.SwapDescriptionStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>[],
        PromiseOrValue<BigNumberish>[],
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "swapAndPurchase", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        I1inchAggregationRouterV4.SwapDescriptionStruct,
        PromiseOrValue<BytesLike>,
        ERC20SSOV1inchRouter.PurchaseOptionStruct
    ]): string;
    encodeFunctionData(functionFragment: "swapNativeAndDeposit", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        I1inchAggregationRouterV4.SwapDescriptionStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "swapNativeAndDepositMultiple", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        I1inchAggregationRouterV4.SwapDescriptionStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>[],
        PromiseOrValue<BigNumberish>[],
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "swapNativeAndPurchase", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        I1inchAggregationRouterV4.SwapDescriptionStruct,
        PromiseOrValue<BytesLike>,
        ERC20SSOV1inchRouter.PurchaseOptionStruct
    ]): string;
    encodeFunctionData(functionFragment: "wrappedNativeToken", values?: undefined): string;
    decodeFunctionResult(functionFragment: "aggregationRouterV4", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "swapAndDeposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "swapAndDepositMultiple", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "swapAndPurchase", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "swapNativeAndDeposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "swapNativeAndDepositMultiple", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "swapNativeAndPurchase", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "wrappedNativeToken", data: BytesLike): Result;
    events: {};
}
export interface ERC20SSOV1inchRouter extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ERC20SSOV1inchRouterInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        aggregationRouterV4(overrides?: CallOverrides): Promise<[string]>;
        swapAndDeposit(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _strikeIndex: PromiseOrValue<BigNumberish>, _to: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        swapAndDepositMultiple(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _strikeIndices: PromiseOrValue<BigNumberish>[], _amounts: PromiseOrValue<BigNumberish>[], _to: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        swapAndPurchase(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _params: ERC20SSOV1inchRouter.PurchaseOptionStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        swapNativeAndDeposit(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _strikeIndex: PromiseOrValue<BigNumberish>, _to: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        swapNativeAndDepositMultiple(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _strikeIndices: PromiseOrValue<BigNumberish>[], _amounts: PromiseOrValue<BigNumberish>[], _to: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        swapNativeAndPurchase(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _params: ERC20SSOV1inchRouter.PurchaseOptionStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        wrappedNativeToken(overrides?: CallOverrides): Promise<[string]>;
    };
    aggregationRouterV4(overrides?: CallOverrides): Promise<string>;
    swapAndDeposit(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _strikeIndex: PromiseOrValue<BigNumberish>, _to: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    swapAndDepositMultiple(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _strikeIndices: PromiseOrValue<BigNumberish>[], _amounts: PromiseOrValue<BigNumberish>[], _to: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    swapAndPurchase(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _params: ERC20SSOV1inchRouter.PurchaseOptionStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    swapNativeAndDeposit(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _strikeIndex: PromiseOrValue<BigNumberish>, _to: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    swapNativeAndDepositMultiple(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _strikeIndices: PromiseOrValue<BigNumberish>[], _amounts: PromiseOrValue<BigNumberish>[], _to: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    swapNativeAndPurchase(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _params: ERC20SSOV1inchRouter.PurchaseOptionStruct, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    wrappedNativeToken(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        aggregationRouterV4(overrides?: CallOverrides): Promise<string>;
        swapAndDeposit(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _strikeIndex: PromiseOrValue<BigNumberish>, _to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        swapAndDepositMultiple(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _strikeIndices: PromiseOrValue<BigNumberish>[], _amounts: PromiseOrValue<BigNumberish>[], _to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        swapAndPurchase(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _params: ERC20SSOV1inchRouter.PurchaseOptionStruct, overrides?: CallOverrides): Promise<boolean>;
        swapNativeAndDeposit(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _strikeIndex: PromiseOrValue<BigNumberish>, _to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        swapNativeAndDepositMultiple(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _strikeIndices: PromiseOrValue<BigNumberish>[], _amounts: PromiseOrValue<BigNumberish>[], _to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        swapNativeAndPurchase(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _params: ERC20SSOV1inchRouter.PurchaseOptionStruct, overrides?: CallOverrides): Promise<boolean>;
        wrappedNativeToken(overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        aggregationRouterV4(overrides?: CallOverrides): Promise<BigNumber>;
        swapAndDeposit(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _strikeIndex: PromiseOrValue<BigNumberish>, _to: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        swapAndDepositMultiple(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _strikeIndices: PromiseOrValue<BigNumberish>[], _amounts: PromiseOrValue<BigNumberish>[], _to: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        swapAndPurchase(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _params: ERC20SSOV1inchRouter.PurchaseOptionStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        swapNativeAndDeposit(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _strikeIndex: PromiseOrValue<BigNumberish>, _to: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        swapNativeAndDepositMultiple(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _strikeIndices: PromiseOrValue<BigNumberish>[], _amounts: PromiseOrValue<BigNumberish>[], _to: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        swapNativeAndPurchase(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _params: ERC20SSOV1inchRouter.PurchaseOptionStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        wrappedNativeToken(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        aggregationRouterV4(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        swapAndDeposit(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _strikeIndex: PromiseOrValue<BigNumberish>, _to: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        swapAndDepositMultiple(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _strikeIndices: PromiseOrValue<BigNumberish>[], _amounts: PromiseOrValue<BigNumberish>[], _to: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        swapAndPurchase(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _params: ERC20SSOV1inchRouter.PurchaseOptionStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        swapNativeAndDeposit(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _strikeIndex: PromiseOrValue<BigNumberish>, _to: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        swapNativeAndDepositMultiple(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _strikeIndices: PromiseOrValue<BigNumberish>[], _amounts: PromiseOrValue<BigNumberish>[], _to: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        swapNativeAndPurchase(_ssovAddress: PromiseOrValue<string>, _ssovTokenAddress: PromiseOrValue<string>, _caller: PromiseOrValue<string>, _desc: I1inchAggregationRouterV4.SwapDescriptionStruct, _data: PromiseOrValue<BytesLike>, _params: ERC20SSOV1inchRouter.PurchaseOptionStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        wrappedNativeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
