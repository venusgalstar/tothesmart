import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export interface DiamondPepeNFTsPledgeInterface extends utils.Interface {
    functions: {
        "burnFloors(uint256[])": FunctionFragment;
        "burned(uint256)": FunctionFragment;
        "depositOneOfOnes(uint256[])": FunctionFragment;
        "deposited()": FunctionFragment;
        "endPledgePeriod()": FunctionFragment;
        "hasDistributed()": FunctionFragment;
        "isPledgePeriod()": FunctionFragment;
        "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
        "oneOfOnes(uint256)": FunctionFragment;
        "owner()": FunctionFragment;
        "pepes()": FunctionFragment;
        "pickWinners(uint256[])": FunctionFragment;
        "pledge(uint256[])": FunctionFragment;
        "pledged(uint256)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "totalPledged()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "burnFloors" | "burned" | "depositOneOfOnes" | "deposited" | "endPledgePeriod" | "hasDistributed" | "isPledgePeriod" | "onERC721Received" | "oneOfOnes" | "owner" | "pepes" | "pickWinners" | "pledge" | "pledged" | "renounceOwnership" | "totalPledged" | "transferOwnership"): FunctionFragment;
    encodeFunctionData(functionFragment: "burnFloors", values: [PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "burned", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "depositOneOfOnes", values: [PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "deposited", values?: undefined): string;
    encodeFunctionData(functionFragment: "endPledgePeriod", values?: undefined): string;
    encodeFunctionData(functionFragment: "hasDistributed", values?: undefined): string;
    encodeFunctionData(functionFragment: "isPledgePeriod", values?: undefined): string;
    encodeFunctionData(functionFragment: "onERC721Received", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "oneOfOnes", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "pepes", values?: undefined): string;
    encodeFunctionData(functionFragment: "pickWinners", values: [PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "pledge", values: [PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "pledged", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalPledged", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "burnFloors", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burned", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositOneOfOnes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deposited", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endPledgePeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasDistributed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isPledgePeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onERC721Received", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oneOfOnes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pepes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pickWinners", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pledge", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pledged", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalPledged", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "LogBurn(uint256)": EventFragment;
        "LogDistributed(uint256,address,uint256)": EventFragment;
        "LogPledged(address,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "LogBurn"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LogDistributed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LogPledged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
export interface LogBurnEventObject {
    tokenId: BigNumber;
}
export declare type LogBurnEvent = TypedEvent<[BigNumber], LogBurnEventObject>;
export declare type LogBurnEventFilter = TypedEventFilter<LogBurnEvent>;
export interface LogDistributedEventObject {
    randomNumber: BigNumber;
    winner: string;
    tokenId: BigNumber;
}
export declare type LogDistributedEvent = TypedEvent<[
    BigNumber,
    string,
    BigNumber
], LogDistributedEventObject>;
export declare type LogDistributedEventFilter = TypedEventFilter<LogDistributedEvent>;
export interface LogPledgedEventObject {
    pledgor: string;
    tokenId: BigNumber;
}
export declare type LogPledgedEvent = TypedEvent<[
    string,
    BigNumber
], LogPledgedEventObject>;
export declare type LogPledgedEventFilter = TypedEventFilter<LogPledgedEvent>;
export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export declare type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
export declare type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface DiamondPepeNFTsPledge extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: DiamondPepeNFTsPledgeInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        burnFloors(tokenIds: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        burned(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        depositOneOfOnes(tokenIds: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        deposited(overrides?: CallOverrides): Promise<[boolean]>;
        endPledgePeriod(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        hasDistributed(overrides?: CallOverrides): Promise<[boolean]>;
        isPledgePeriod(overrides?: CallOverrides): Promise<[boolean]>;
        onERC721Received(operator: PromiseOrValue<string>, from: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        oneOfOnes(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        pepes(overrides?: CallOverrides): Promise<[string]>;
        pickWinners(randomNumbers: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        pledge(tokenIds: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        pledged(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        totalPledged(overrides?: CallOverrides): Promise<[BigNumber]>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    burnFloors(tokenIds: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    burned(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    depositOneOfOnes(tokenIds: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    deposited(overrides?: CallOverrides): Promise<boolean>;
    endPledgePeriod(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    hasDistributed(overrides?: CallOverrides): Promise<boolean>;
    isPledgePeriod(overrides?: CallOverrides): Promise<boolean>;
    onERC721Received(operator: PromiseOrValue<string>, from: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    oneOfOnes(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    pepes(overrides?: CallOverrides): Promise<string>;
    pickWinners(randomNumbers: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    pledge(tokenIds: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    pledged(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    totalPledged(overrides?: CallOverrides): Promise<BigNumber>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        burnFloors(tokenIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<boolean>;
        burned(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        depositOneOfOnes(tokenIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<boolean>;
        deposited(overrides?: CallOverrides): Promise<boolean>;
        endPledgePeriod(overrides?: CallOverrides): Promise<boolean>;
        hasDistributed(overrides?: CallOverrides): Promise<boolean>;
        isPledgePeriod(overrides?: CallOverrides): Promise<boolean>;
        onERC721Received(operator: PromiseOrValue<string>, from: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        oneOfOnes(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        pepes(overrides?: CallOverrides): Promise<string>;
        pickWinners(randomNumbers: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<boolean>;
        pledge(tokenIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<boolean>;
        pledged(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        totalPledged(overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "LogBurn(uint256)"(tokenId?: null): LogBurnEventFilter;
        LogBurn(tokenId?: null): LogBurnEventFilter;
        "LogDistributed(uint256,address,uint256)"(randomNumber?: null, winner?: null, tokenId?: null): LogDistributedEventFilter;
        LogDistributed(randomNumber?: null, winner?: null, tokenId?: null): LogDistributedEventFilter;
        "LogPledged(address,uint256)"(pledgor?: null, tokenId?: null): LogPledgedEventFilter;
        LogPledged(pledgor?: null, tokenId?: null): LogPledgedEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
    };
    estimateGas: {
        burnFloors(tokenIds: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        burned(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        depositOneOfOnes(tokenIds: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        deposited(overrides?: CallOverrides): Promise<BigNumber>;
        endPledgePeriod(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        hasDistributed(overrides?: CallOverrides): Promise<BigNumber>;
        isPledgePeriod(overrides?: CallOverrides): Promise<BigNumber>;
        onERC721Received(operator: PromiseOrValue<string>, from: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        oneOfOnes(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        pepes(overrides?: CallOverrides): Promise<BigNumber>;
        pickWinners(randomNumbers: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        pledge(tokenIds: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        pledged(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        totalPledged(overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        burnFloors(tokenIds: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        burned(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        depositOneOfOnes(tokenIds: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        deposited(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        endPledgePeriod(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        hasDistributed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isPledgePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        onERC721Received(operator: PromiseOrValue<string>, from: PromiseOrValue<string>, tokenId: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        oneOfOnes(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pepes(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pickWinners(randomNumbers: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        pledge(tokenIds: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        pledged(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        totalPledged(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
